@using Newtonsoft.Json
@using System.Text
@using System.Net
@inject NavigationManager NavManager
@inject HttpClient _http
@inject IJSRuntime _js
@inject StateContainer localStorage

<style>
    #splash {
        width: 200px;
        height: 200px;
        background: url("../SEll.png");
    }
</style>
@if (!isLoaded)
{
    <div id="splash">
        Cargando...
    </div>
}
else
{
    <form class="w-75 h-100 d-flex justify-content-center pb-5" style="margin: 0 auto;">
        <div class="d-flex flex-column w-25 mt-5">
            <h3 class="text-center mb-3">Login</h3>
            <input type="text" class="form-control p-2 w-100 mb-2"
                   id="username"
                   placeholder="Usuario"
               @bind="@user.Username" />
            <input type="password" class="form-control p-2 w-100 mb-3"
                   id="password"
                   placeholder="Contraseña"
               @bind="@user.PassWord" />
            <button type="button" id="btnLogin" @onclick="LogIn" class="btn btn-success w-100">Iniciar Sesion</button>
        </div>
    </form>

    @if (message != null)
    {
        <p id="message">  @message </p>
    }

    @if (isLoading)
    {

        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only"></span>
            </div>
        </div>
    }
}

@code {
    private bool isLoaded = false;
    private bool existUser = true;
    private bool isLoading;
    private UserDTO user = new UserDTO();
    private string message = null!;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(Load);
    }

    private async void LogIn()
    {
        isLoading = true;
        if (string.IsNullOrEmpty(user.Username) || string.IsNullOrEmpty(user.PassWord))
        {
            message = "El usuario y contraseña son necesarios...";
        }
        else
        {
            var data = JsonConvert.SerializeObject(user);
            var content = new StringContent(data, Encoding.UTF8, "application/json");

            if (existUser)
            {

                var result = await _http.PostAsync("/api/User/SignIn", content);

                var response = JsonConvert.DeserializeObject<User>(await result.Content.ReadAsStringAsync());
                if (response is null || response.Id == 0)
                {
                    message = "El usuario y/o contraseña son incorrectos...";
                }
                else
                {
                    localStorage.user = response;
                    NavManager.NavigateTo("/home");
                }
            }
            else
            {
                var result = await _http.PostAsync("/api/User/", content);

                var response = JsonConvert.DeserializeObject<User>(await result.Content.ReadAsStringAsync());
                if (result.StatusCode != HttpStatusCode.OK)
                {
                    message =  "Error al crear el usuario.";
                }
                else
                {
                    message = "Usuario creado con exito"; 

                    localStorage.user = response;
                    NavManager.NavigateTo("/home");
                }
            }

        }
        isLoading = false;
        StateHasChanged();
    }


    private async void Load()
    {
        isLoaded = true;
        try
        {

            var result = await _http.GetAsync("/api/User/TieneUsuarios");
            existUser = JsonConvert.DeserializeObject<bool>(await result.Content.ReadAsStringAsync());
            if (!existUser)
            {

              message = "No existen usuarios. El usuario que escriba a continuacion sera su usuario principal.";
            }
        }
        catch
        {

        }
    }
}
